package gui;

import gamedata.structs.Account;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListDataEvent;
import listeners.PacketListener;
import net.Client;
import net.packets.Packet;
import net.packets.Packet.PacketType;
import net.packets.client.InvSwapPacket;
import net.packets.dataobjects.Entity;
import net.packets.dataobjects.Location;
import net.packets.dataobjects.SlotObject;
import net.packets.dataobjects.StatData;
import net.packets.dataobjects.VaultChest;
import net.packets.server.FailurePacket;
import net.packets.server.TradeDonePacket;
import net.packets.server.UpdatePacket;
import util.Constants;
import util.Constants.GameId;

public class AppGui extends javax.swing.JFrame {

    /**
     * Creates new form AppGui
     */
    public AppGui() {
        initComponents();
        
        //RotMG initializations must occur after gui components are initialized.
        initGamedata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tradeNameField = new javax.swing.JTextField();
        btnTrade = new javax.swing.JButton();
        serverComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlAccountList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        invList = new javax.swing.JList();
        cbVaulting = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        charIdField = new javax.swing.JTextField();
        btnStoreItems = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Email:");

        emailField.setToolTipText("Account login email.");
        emailField.setDoubleBuffered(true);
        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Password: ");

        passField.setToolTipText("Account password.");
        passField.setDoubleBuffered(true);

        btnLogin.setText("Login");
        btnLogin.setToolTipText("Loging into the game.");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel3.setText("Server: ");

        jLabel4.setText("Trade Player: ");
        jLabel4.setToolTipText("Name of the player to trade with.");

        tradeNameField.setDoubleBuffered(true);
        tradeNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeNameFieldActionPerformed(evt);
            }
        });

        btnTrade.setText("Trade");
        btnTrade.setToolTipText("Begins trade with the specified player.");
        btnTrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTradeActionPerformed(evt);
            }
        });
        btnTrade.setEnabled(false);

        serverComboBox.setDoubleBuffered(true);
        serverComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                serverComboBoxItemStateChanged(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        logArea.setRows(5);
        logArea.setDoubleBuffered(true);
        javax.swing.text.DefaultCaret caret = (javax.swing.text.DefaultCaret)logArea.getCaret();
        caret.setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        logArea.setCaret(caret);
        jScrollPane2.setViewportView(logArea);

        jLabel5.setText("Log:");

        jLabel6.setText("Accounts:");

        jlAccountList.setDoubleBuffered(true);
        jlAccountList.setSelectionMode(javax.swing.DefaultListSelectionModel.SINGLE_SELECTION);
        jlAccountList.setModel(new javax.swing.DefaultListModel<>());
        jScrollPane3.setViewportView(jlAccountList);

        jLabel7.setText("Inventory:");

        invList.setDoubleBuffered(true);
        invList.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane4.setViewportView(invList);

        cbVaulting.setText("Auto Storage");
        cbVaulting.setToolTipText("When enabled, stores items in vault after each trade.");
        cbVaulting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbVaultingItemStateChanged(evt);
            }
        });

        jLabel8.setText("Char ID:");

        charIdField.setToolTipText("(Optional) Id of character to login with. If not provided, log in with random character.");
        charIdField.setDoubleBuffered(true);

        btnStoreItems.setText("Store Items");
        btnStoreItems.setToolTipText("Moves items to backpack and vault if enough space.");
        btnStoreItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreItemsActionPerformed(evt);
            }
        });
        btnStoreItems.setEnabled(false);

        btnLogin.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(130, 130, 130))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 1, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(cbVaulting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(btnTrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addComponent(btnStoreItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tradeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(107, 107, 107))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(charIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(charIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLogin)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbVaulting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTrade, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStoreItems, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cbVaulting.setSelected(true);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setDoubleBuffered(true);
        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jMenu1.setText("File");
        jMenu1.setFocusable(false);

        jMenuItem3.setText("Clear Log");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem1.setText("Save Account");
        jMenuItem1.setToolTipText("");
        jMenuItem1.setActionCommand("Load acocunts");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem2.setText("Close");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        AppGui.this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                AppGui.this.saveAccount();
            }
        });
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void serverComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_serverComboBoxItemStateChanged
        workerPool.execute(new Runnable() {
            @Override
            public void run() {

                if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    gamedata.structs.ServerNode sNode = gamedata.GameData.servers.byName((String)evt.getItem());
                    if(sNode == null) {
                        AppGui.this.logArea.append("Unable to change to server [" + (String)evt.getItem() + "].");
                    } else {
                        AppGui.this.server = sNode;
                    }

                }
            }
        });
    }//GEN-LAST:event_serverComboBoxItemStateChanged

    private void btnTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTradeActionPerformed
        this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                /*
                try {
                    
                    net.packets.client.InvSwapPacket isp = new net.packets.client.InvSwapPacket();
                    isp.time = AppGui.this.client.getTime();
                    isp.position = (net.packets.dataobjects.Location)AppGui.this.client.position.clone();
                    System.out.println("my char pos at time of trade: [" + isp.position + "]");
                    isp.slotObject1 = new net.packets.dataobjects.SlotObject();
                    isp.slotObject1.objectId = AppGui.this.client.objectId;
                    isp.slotObject1.slotId = 10;
                    isp.slotObject1.objectType = 2832;
                    System.out.println("item about to be moved: [" + isp.slotObject1 + "]");
                    
                    isp.slotObject2 = new net.packets.dataobjects.SlotObject();                    
                    //Search for empty slot in vault chest
                    for(java.util.Map.Entry<Integer, ArrayList<Integer>> entry : AppGui.this.client.vaultChests.entrySet()) {
                        for(Integer item : entry.getValue()) {
                            if(item == -1) {
                                isp.slotObject2.objectId = entry.getKey();
                                isp.slotObject2.slotId = entry.getValue().indexOf(-1);
                                isp.slotObject2.objectType = item;
                                System.out.println("Empty chest slot found." + entry.getValue().indexOf(-1));
                            }
                        }
                        if(isp.slotObject2.objectId > 0) {
                            break;
                        }
                    }
                    System.out.println("Slot to move to: [" + isp.slotObject2 + "]");
                    
                    //isp.slotObject2.objectId = 390;  //chest id
                    //isp.slotObject2.slotId = 3;
                    //isp.slotObject2.objectType = -1;
                    
                    AppGui.this.client.sendQueue.add(isp);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                }
                */
                    
                //move the client move by 2 units.
                //AppGui.this.client.moveToPos.x = AppGui.this.client.position.x;
                //AppGui.this.client.moveToPos.y = AppGui.this.client.position.y + 20f;
                
                String name = AppGui.this.tradeNameField.getText().trim();
                if(name.matches("")) {
                    AppGui.this.logArea.append("ERROR: Enter a valid player name to trade with." + newLine);
                    return;
                }
                net.packets.client.RequestTradePacket rtp = new net.packets.client.RequestTradePacket();
                rtp.name = name;
                client.sendQueue.add(rtp);
                AppGui.this.logArea.append("Trade requested with player [" + rtp.name + "]" + newLine);
            }
        });
    }//GEN-LAST:event_btnTradeActionPerformed

    private void tradeNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tradeNameFieldActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed

        //Free up EDT
        this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                if(AppGui.this.client.isLoggedIn()) {
                    AppGui.this.logoff();
                } else {
                    try {
                        AppGui.this.email = AppGui.this.emailField.getText();
                        AppGui.this.password = new String(AppGui.this.passField.getPassword());
                        String charIdText = AppGui.this.charIdField.getText();
                        if(!charIdText.equals("")) {
                            AppGui.this.charId = Integer.parseInt(charIdText);
                        } else {
                            AppGui.this.charId = -1;
                        }

                        AppGui.this.logArea.append("Attempting to connect to server..." + newLine);
                        if(!AppGui.this.client.connect(AppGui.this.server)) {
                            throw new java.net.ConnectException();
                        }
                        
                        AppGui.this.logArea.append("Attempting to login..." + newLine);
                        if(!AppGui.this.client.login(new gamedata.structs.Account(AppGui.this.email, AppGui.this.password, AppGui.this.charId), GameId.NEXUS)) {
                            throw new Exception("Email or password is invalid.");
                        }

                        AppGui.this.logArea.append("Successfuly connected to server [" + AppGui.this.server.name + "]" + newLine);
                        AppGui.this.setTitle(AppGui.this.getTitle() + " - " + AppGui.this.email + "[" + AppGui.this.client.accountName + "]");
                        AppGui.this.btnLogin.setText("Logout");
                        AppGui.this.btnTrade.setEnabled(true);
                        AppGui.this.btnStoreItems.setEnabled(true);
                        
                    } catch(java.net.ConnectException e) {
                        AppGui.this.logArea.append("Unable to connect to server. Check if client is up to date." + newLine);
                    } catch(java.lang.NumberFormatException e) {
                        AppGui.this.logArea.append("Character ID is invalid.");
                    } catch (Exception e) {
                        String errMsg = "Unable to login.";
                        if(e.getMessage() != null) {
                            errMsg += " " + e.getMessage();
                        }
                        AppGui.this.logArea.append(errMsg + newLine);
                        //safely dispose of the connection.
                        AppGui.this.logoff();
                    }
                }
            }
        });
    }//GEN-LAST:event_btnLoginActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailFieldActionPerformed

    private void cbVaultingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbVaultingItemStateChanged
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            AppGui.this.autoStore = true;
        } else {
            AppGui.this.autoStore = false;
        }
    }//GEN-LAST:event_cbVaultingItemStateChanged

    private void btnStoreItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreItemsActionPerformed
        workerPool.execute(AppGui.this.storeTask);
    }//GEN-LAST:event_btnStoreItemsActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        AppGui.this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                AppGui.this.logArea.setText("");
            }
        });
    }//GEN-LAST:event_jMenuItem3ActionPerformed
    
    /*
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                javax.swing.JFrame mainWin = new AppGui();
                mainWin.setTitle("RotMG Clientless");
                mainWin.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
                mainWin.setLocationRelativeTo(null);
                
                ArrayList<java.awt.Image> list = new ArrayList<>();
                list.add(Toolkit.getDefaultToolkit().createImage("includes/img/icon1.png"));
                list.add(Toolkit.getDefaultToolkit().createImage("includes/img/icon2.png"));
                list.add(Toolkit.getDefaultToolkit().createImage("includes/img/icon3.png"));
                list.add(Toolkit.getDefaultToolkit().createImage("includes/img/icon4.png"));
                mainWin.setIconImages(list);
                
                mainWin.setVisible(true);
            }
        });
        
        //Clean up char id files at end from current dir
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                java.io.File cleanupFiles = new java.io.File("./");
                System.out.println("Dir: " + cleanupFiles.isDirectory() + ", " + cleanupFiles.getAbsolutePath());
                for(java.io.File f : cleanupFiles.listFiles()) {
                    if(f.getName().contains(".acc")) {
                        //System.out.println(f.getName());
                        f.delete();
                    }
                }
            }
        }));
        
    }
    
    //ROTMG variables
    private final String defaultTitle = "RotMG Clientless";
    private String email;
    private String password;
    private int charId;
    private boolean autoStore = true;
    
    private listeners.Proxy proxy;
    private net.Client client;
    private ArrayList<String> serverList;
    private gamedata.structs.ServerNode server;
    private Runnable storeTask;
    private Map<String, Account> accounts;
    
    private java.util.concurrent.ExecutorService workerPool = java.util.concurrent.Executors.newFixedThreadPool(1);
    private String newLine = System.lineSeparator();
    
    //Action to perfrom when logging off from a client.
    private void logoff() {
        if(this.client != null) {
            if(this.client.isConnected()) {
                this.client.disconnect();
            }
            this.setTitle(this.defaultTitle);
            this.btnLogin.setText("Login");
            this.logArea.append("Disconnecting from server..." + newLine);
            this.btnTrade.setEnabled(false);
            this.btnStoreItems.setEnabled(false);
        }
    }
    
    //Prepares static game data.
    private void initGamedata() {
        //Loading xmls may be expensive, don't do work in EDT.
        workerPool.execute(new java.lang.Runnable() {
            @Override
            public void run() {
                try {
                    AppGui.this.logArea.append("Loading game xmls..." + newLine);
                    gamedata.GameData.load();

                    AppGui.this.logArea.append("Initializing network listeners..." + newLine);
                    AppGui.this.proxy = new listeners.Proxy();
                    
                    AppGui.this.logArea.append("Loading server list..." + newLine);
                    //NOTE: Abbreviations list must be updated when server list is updated, otherwise,
                    //      new servers will not show up.
                    AppGui.this.serverList = new ArrayList<String>(gamedata.structs.ServerNode.abbreviations.keySet());
                    Collections.sort(AppGui.this.serverList);
                    //new model with server list for already created server combobox
                    AppGui.this.serverComboBox.setModel(new javax.swing.DefaultComboBoxModel(AppGui.this.serverList.toArray()));
                    AppGui.this.serverComboBox.setSelectedItem("USWest");
                    gamedata.structs.ServerNode sNode = gamedata.GameData.servers.byName("USWest");
                    if(sNode == null) {
                        AppGui.this.logArea.append("Unable select server [USWest].");
                    } else {
                        AppGui.this.server = sNode;
                    }

                    AppGui.this.logArea.append("Initializing game client..." + newLine);
                    AppGui.this.client = new net.Client(proxy);                    
                    
                    
                    //Initialize accounts list
                    AppGui.this.logArea.append("Loading saved accounts..." + newLine);
                    AppGui.this.accounts = AppGui.this.loadAccounts();
                    if(AppGui.this.accounts.size() > 0) {                        
                        javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel<>();
                        Object[] accList = AppGui.this.accounts.keySet().toArray();
                        java.util.Arrays.sort(accList);
                        for(Object guid : accList) {
                            listModel.addElement(guid);
                        } 
                        AppGui.this.jlAccountList.setModel(listModel);
                    }   
                    
                    setListeners();
                    setTasks();
                    
                    AppGui.this.btnLogin.setEnabled(true);
                    
                } catch(Exception e) {
                    AppGui.this.logArea.append("Unable to initialize client..." + newLine);
                    AppGui.this.btnLogin.setEnabled(false);
                    AppGui.this.logArea.setForeground(java.awt.Color.RED);
                    for(StackTraceElement ste : e.getStackTrace()) {
                        AppGui.this.logArea.append(ste.toString() + newLine);
                    }
                    AppGui.this.logArea.setForeground(java.awt.Color.BLACK);
                }
            }
        });
    }
    
    private void setListeners() {
        //Listener that detects item list change via 'Update' and 'NewTick' packets.
        PacketListener listUpdate = new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                if(client.itemListsUpdated) {
                    //refresh item list after logging into the game
                    javax.swing.DefaultListModel<String> listModel = new javax.swing.DefaultListModel<String>();
                    System.out.println("Vault chests size: " + client.vaultChests.size());
                    if(AppGui.this.client.inv.size() > 0 || AppGui.this.client.backpack.size() > 0) {
                        //listModel.addElement("Chest #" + entry.getKey());
                        int i = 1;
                        for(Integer item : AppGui.this.client.inv) {
                            listModel.addElement("[" + (i++) + "]  " + gamedata.GameData.items.byId(item).name);
                        }
                        if(client.hasBackpack) {
                            for(Integer item : AppGui.this.client.backpack) {
                                listModel.addElement("[" + (i++) + "]  " + gamedata.GameData.items.byId(item).name);
                            }
                        }
                    }
                    AppGui.this.invList.setModel(listModel);
                    client.itemListsUpdated = false;
                }
            }
        };
        AppGui.this.proxy.hookPacket(Packet.PacketType.UPDATE, listUpdate);
        AppGui.this.proxy.hookPacket(Packet.PacketType.NEWTICK, listUpdate);
        
        //Upon completed trade, store items if vaulting is enabled.
        AppGui.this.proxy.hookPacket(PacketType.TRADEDONE, new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                TradeDonePacket tdp = (TradeDonePacket)packet;
                //Only care about successful trades
                if(tdp.result == 0 && AppGui.this.autoStore) {
                    workerPool.execute(AppGui.this.storeTask);                    
                }
            }
        });
        
        
        //Upon failure, reset GUI
        AppGui.this.proxy.hookPacket(PacketType.FAILURE, new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                System.out.println("NOTICE::AppGui: Failure!");
                FailurePacket fp = (FailurePacket)packet;
                AppGui.this.logArea.append("Connection terminated due to failure...[" + fp.errorMessage + "]" + newLine);
                AppGui.this.logoff();
            }
        });
        
        
        //Load the GUI login info from saved accounts list
        AppGui.this.jlAccountList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if(e.getClickCount() == 2) {
                    int index = AppGui.this.jlAccountList.locationToIndex(e.getPoint());
                    if(index >= 0) {
                        String gui = (String)AppGui.this.jlAccountList.getModel().getElementAt(index);
                        Account acc = AppGui.this.accounts.get(gui);
                        if(acc != null) {
                            AppGui.this.emailField.setText(acc.guid);
                            AppGui.this.passField.setText(acc.password);
                            AppGui.this.charIdField.setText(Integer.toString(acc.charId));
                        } else {
                            AppGui.this.logArea.append("ERROR: Unable to load account.");
                        }
                    }                    
                }
            }
        });
        
        //Removes entry from list when 'Delete' is pressed
        AppGui.this.jlAccountList.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                    AppGui.this.workerPool.execute(new Runnable() {
                        @Override
                        public void run() {
                            AppGui.this.removeAccount();
                        }
                    });
                }
            }
        });
        
    }
    
    private void setTasks() {
        this.storeTask = new Runnable() {
            @Override
            public void run() {
                try {
                    //
                    AppGui.this.btnTrade.setEnabled(false);
                    AppGui.this.btnStoreItems.setEnabled(false);

                    AppGui.this.logArea.append("Storing items...Please wait..." + newLine);
                    client.moveItemsToBackpack();

                    //Connect to vault.
                    client.reconnect(GameId.VAULT);

                    //wait for the chest data to come in.
                    while((client.getTime() - client.itemListLastUpdate) < 2000) {
                        Thread.sleep(200);
                    }

                    //vault items
                    if(!client.isInventoryEmpty() && !client.isBackpackEmpty()) {
                        //inventory slots values range from [4, 11] and backpack ranges from [12, 19]
                        for(int s = 4; s < 20; s++) {
                            int fromSlot = (s < 12? s - 4 : s - 12);
                            ArrayList<Integer> storeFrom = (s < 12? client.inv : client.backpack);
                            int item = storeFrom.get(fromSlot);
                            if(item == -1) {
                                continue;
                            }

                            //Find a empty slot in vault.
                            int toSlot = -1;
                            for(VaultChest vc : client.vaultChests.values()) {
                                for(int i = 0; i < 8 ; i++) {
                                    if(vc.items.get(i) == -1) {
                                        toSlot = i;
                                        break;
                                    }
                                }
                                if(toSlot > -1) {
                                    //move to chest location
                                    client.moveToFreely((Location)vc.position.clone());
                                    while(!client.position.isSameAs(vc.position)) {
                                        Thread.sleep(500);
                                    }
                                    //empty slot was found in vault; move item here from inv/backpack
                                    InvSwapPacket isp = new InvSwapPacket();
                                    isp.position = (Location)client.position.clone();
                                    isp.time = client.getTime();
                                    isp.slotObject1 = new SlotObject();
                                    isp.slotObject1.objectId = client.objectId;
                                    isp.slotObject1.slotId = s;
                                    isp.slotObject1.objectType = item;
                                    isp.slotObject2 = new SlotObject();
                                    isp.slotObject2.objectId = vc.id;
                                    isp.slotObject2.slotId = toSlot;
                                    isp.slotObject2.objectType = -1;
                                    client.sendQueue.add(isp);

                                    System.out.println("From: " + isp.slotObject1);
                                    System.out.println("To: " + isp.slotObject2);

                                    Thread.sleep(650);                                    
                                    break;
                                }
                            }
                        }
                    }

                    client.reconnect(GameId.NEXUS);
                    AppGui.this.logArea.append("Finished storing items..." + newLine);
                    AppGui.this.btnTrade.setEnabled(true);
                    AppGui.this.btnStoreItems.setEnabled(true);

                } catch(InterruptedException | CloneNotSupportedException e) {
                    e.printStackTrace();
                }
            }
        };
    }
    
    private HashMap<String, Account> loadAccounts() {
        HashMap<String, Account> accMap = new HashMap<>(10);
        java.io.BufferedReader br = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("includes/res/accounts2.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            for(int i = 0; i < arr.length(); i++) {
                String email = arr.getJSONObject(i).getString("email");
                String password = arr.getJSONObject(i).getString("password");
                int charId = arr.getJSONObject(i).getInt("charid");
                System.out.println("read obj: [" + email + ", " + password + ", " + charId + "]");
                accMap.put(email, new Account(email, password, charId));
            }
        } catch (FileNotFoundException  e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return accMap;
        }
    }
    
    private void saveAccount() {
        String newEmail = AppGui.this.emailField.getText().trim();
        String newPass = new String(AppGui.this.passField.getPassword());
        if(newEmail.matches("") || newPass.matches("")) {
            AppGui.this.logArea.append("ERROR: Unable to save account info. Enter valid email and password." + newLine);
            return;
        }
        String newCharId = AppGui.this.charIdField.getText().trim();
        if(newCharId.matches("")) {
            newCharId = "-1";
        }
        AppGui.this.logArea.append("Saving account info for account [" + newEmail + "]" + newLine);
        //"accounts" map needs to be updated to allow for JList to search data associated with an email
        AppGui.this.accounts.put(newEmail, new Account(newEmail, newPass, Integer.parseInt(newCharId)));
        ((javax.swing.DefaultListModel)AppGui.this.jlAccountList.getModel()).addElement(newEmail);
        
        java.io.BufferedReader br = null;
        java.io.BufferedWriter bw = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("includes/res/accounts2.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            br.close();           
            
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            org.json.JSONObject newJo = new org.json.JSONObject("{\"email\": \"" + newEmail + 
                                                                 "\",\"password\": \"" + newPass + 
                                                                 "\",\"charid\": " + newCharId + "}");
            arr.put(newJo);
            jo.put("accounts", arr);
            bw = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream("includes/res/accounts2.json")));
            bw.write(jo.toString());
            bw.close();
            
        } catch (FileNotFoundException  e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
                bw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void removeAccount() {
        String entry = (String)AppGui.this.jlAccountList.getSelectedValue();
        
        if(entry == null) {
            return;
        }
        //remove from GUI
        AppGui.this.logArea.append("Removing saved account [" + entry + "] from list." + newLine);
        ((javax.swing.DefaultListModel)AppGui.this.jlAccountList.getModel()).removeElement(entry);
        AppGui.this.accounts.remove(entry);
        
        //remove from file
        java.io.BufferedReader br = null;
        java.io.BufferedWriter bw = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("includes/res/accounts2.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            br.close();           
            
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            for(int i = 0; i < arr.length(); i++) {
                if(arr.getJSONObject(i).getString("email").compareTo(entry) == 0) {
                    arr.remove(i);
                    break;
                }
            }
            jo.put("accounts", arr);
            bw = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream("includes/res/accounts2.json")));
            bw.write(jo.toString());
            bw.close();
            
        } catch (FileNotFoundException  e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                br.close();
                bw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnStoreItems;
    private javax.swing.JButton btnTrade;
    private javax.swing.JCheckBox cbVaulting;
    private javax.swing.JTextField charIdField;
    private javax.swing.JTextField emailField;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JList invList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList jlAccountList;
    private javax.swing.JTextArea logArea;
    private javax.swing.JPasswordField passField;
    private javax.swing.JComboBox serverComboBox;
    private javax.swing.JTextField tradeNameField;
    // End of variables declaration//GEN-END:variables
}
