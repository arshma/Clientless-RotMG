package gui;

import gamedata.GameData;
import gamedata.structs.Account;
import gamedata.structs.ServerNode;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import listeners.ConnectionListener;
import listeners.PacketListener;
import listeners.Proxy;
import net.Client;
import net.packets.Packet;
import net.packets.Packet.PacketType;
import net.packets.client.AcceptTradePacket;
import net.packets.client.InvSwapPacket;
import net.packets.dataobjects.Location;
import net.packets.dataobjects.SlotObject;
import net.packets.dataobjects.VaultChest;
import net.packets.server.FailurePacket;
import net.packets.server.TradeAcceptedPacket;
import net.packets.server.TradeDonePacket;
import util.Constants.GameId;

public class AppGui extends javax.swing.JFrame {

    /**
     * Creates new form AppGui
     */
    public AppGui() {
        initComponents();
        
        //RotMG initializations must occur after gui components are initialized.
        initGamedata();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        passField = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        tradeNameField = new javax.swing.JTextField();
        btnTrade = new javax.swing.JButton();
        serverComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        logArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jlAccountList = new javax.swing.JList();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        invList = new javax.swing.JList();
        cbVaulting = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        charIdField = new javax.swing.JTextField();
        btnStoreItems = new javax.swing.JButton();
        cbVaultData = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem2 = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Email:");

        emailField.setToolTipText("Account login email.");
        emailField.setDoubleBuffered(true);
        emailField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Password: ");

        passField.setToolTipText("Account password.");
        passField.setDoubleBuffered(true);

        btnLogin.setText("Login");
        btnLogin.setToolTipText("Loging into the game.");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jLabel3.setText("Server: ");

        jLabel4.setText("Trade Player: ");
        jLabel4.setToolTipText("Name of the player to trade with.");

        tradeNameField.setDoubleBuffered(true);
        tradeNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tradeNameFieldActionPerformed(evt);
            }
        });

        btnTrade.setText("Trade");
        btnTrade.setToolTipText("Begins trade with the specified player.");
        btnTrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTradeActionPerformed(evt);
            }
        });
        btnTrade.setEnabled(false);

        serverComboBox.setDoubleBuffered(true);
        serverComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                serverComboBoxItemStateChanged(evt);
            }
        });

        logArea.setColumns(20);
        logArea.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        logArea.setRows(5);
        logArea.setDoubleBuffered(true);
        javax.swing.text.DefaultCaret caret = (javax.swing.text.DefaultCaret)logArea.getCaret();
        caret.setUpdatePolicy(javax.swing.text.DefaultCaret.ALWAYS_UPDATE);
        logArea.setCaret(caret);
        logArea.setMinimumSize(new java.awt.Dimension(4, 17));
        jScrollPane2.setViewportView(logArea);

        jLabel5.setText("Log:");

        jLabel6.setText("Accounts:");

        jlAccountList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlAccountList.setDoubleBuffered(true);
        jlAccountList.setSelectionMode(javax.swing.DefaultListSelectionModel.SINGLE_SELECTION);
        jlAccountList.setModel(new javax.swing.DefaultListModel<>());
        jScrollPane3.setViewportView(jlAccountList);

        jLabel7.setText("Inventory:");

        invList.setDoubleBuffered(true);
        jScrollPane4.setViewportView(invList);
        AppGui.this.invList.setCellRenderer(new javax.swing.DefaultListCellRenderer() {
            @Override
            public java.awt.Component getListCellRendererComponent(javax.swing.JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                java.awt.Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if(isSelected) {
                    c.setForeground(java.awt.Color.RED);
                }
                if(index < 8) {
                    this.setBackground(AppGui.INVENTORY_COLOR);
                } else if(index > 7 && !((String)value).matches("\\[C.+\\].*")) {
                    this.setBackground(AppGui.BAG_COLOR);
                } else {
                    boolean startTest = ((index / 8) % 2) == 0;
                    if(!AppGui.this.client.hasBackpack) {
                        startTest = !startTest;
                    }
                    if( startTest ) {
                        this.setBackground(AppGui.CHEST_COLOR_1);
                    } else {
                        this.setBackground(AppGui.CHEST_COLOR_2);
                    }
                }

                return c;
            }
        });

        cbVaulting.setText("Auto Storage");
        cbVaulting.setToolTipText("When enabled, stores items in vault after each trade.");
        cbVaulting.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbVaultingItemStateChanged(evt);
            }
        });

        jLabel8.setText("Char ID:");

        charIdField.setToolTipText("(Optional) Id of character to login with. If not provided, log in with random character.");
        charIdField.setDoubleBuffered(true);

        btnStoreItems.setText("Store Items");
        btnStoreItems.setToolTipText("Moves items to backpack and vault if enough space.");
        btnStoreItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStoreItemsActionPerformed(evt);
            }
        });
        btnStoreItems.setEnabled(false);

        cbVaultData.setText("Vault Data");
        cbVaultData.setToolTipText("If enabled, loads all vault chest data when logging in.");
        cbVaultData.setDoubleBuffered(true);
        cbVaultData.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbVaultDataItemStateChanged(evt);
            }
        });

        btnLogin.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addGap(130, 130, 130))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnStoreItems, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbVaultData)
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(cbVaulting, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnTrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tradeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(107, 107, 107))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(charIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8)
                        .addComponent(charIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnLogin)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tradeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6)
                    .addComponent(cbVaultData))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbVaulting)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTrade, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnStoreItems, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        cbVaulting.setSelected(true);

        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jMenuBar1.setDoubleBuffered(true);
        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jMenu1.setText("File");
        jMenu1.setFocusable(false);

        jMenuItem3.setText("Clear Log");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem1.setText("Save Account");
        jMenuItem1.setToolTipText("");
        jMenuItem1.setActionCommand("Load acocunts");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);
        jMenu1.add(jSeparator1);

        jMenuItem2.setText("Close");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        AppGui.this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                AppGui.this.saveAccount();
            }
        });
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void serverComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_serverComboBoxItemStateChanged
        workerPool.execute(new Runnable() {
            @Override
            public void run() {

                if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
                    gamedata.structs.ServerNode sNode = gamedata.GameData.servers.byName((String)evt.getItem());
                    if(sNode == null) {
                        AppGui.this.logArea.append("Unable to change to server [" + (String)evt.getItem() + "].");
                    } else {
                        AppGui.this.server = sNode;
                    }

                }
            }
        });
    }//GEN-LAST:event_serverComboBoxItemStateChanged

    private void btnTradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTradeActionPerformed
        this.workerPool.execute(new Runnable() {
            @Override
            public void run() {                
                String name = AppGui.this.tradeNameField.getText().trim();
                if(name.matches("")) {
                    AppGui.this.logArea.append("ERROR: Enter a valid player name to trade with." + newLine);
                    return;
                }
                net.packets.client.RequestTradePacket rtp = new net.packets.client.RequestTradePacket();
                rtp.name = name;
                client.sendQueue.add(rtp);
                AppGui.this.logArea.append("Trade requested with player [" + rtp.name + "]" + newLine);
            }
        });
    }//GEN-LAST:event_btnTradeActionPerformed

    private void tradeNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tradeNameFieldActionPerformed
       
    }//GEN-LAST:event_tradeNameFieldActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed

        this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                //Disable login button until char logged in or client fully disconnected or login fails.
                AppGui.this.btnLogin.setEnabled(false);
                
                if(AppGui.this.client.isConnected()) {
                    if(AppGui.this.client.isReconnecting) {
                        AppGui.this.logoff();
                    }
                    AppGui.this.client.disconnect();
                    AppGui.this.btnLogin.setEnabled(true);
                } else {
                    try {
                        AppGui.this.email = AppGui.this.emailField.getText();
                        String password = new String(AppGui.this.passField.getPassword());
                        String charIdText = AppGui.this.charIdField.getText();
                        int charId = -1;
                        if(!charIdText.equals("")) {
                            charId = Integer.parseInt(charIdText);
                        }
                        if(AppGui.this.server == null) {
                            AppGui.this.logArea.append("ERROR: No server selected." + newLine);
                            AppGui.this.btnLogin.setEnabled(true);
                            return;
                        }

                        AppGui.this.logArea.append("Attempting to connect to server [" + AppGui.this.server.name + "]..." + newLine);
                        if(!AppGui.this.client.connect(AppGui.this.server)) {
                            AppGui.this.logArea.append("Unable to connect to server. Check if client is up to date." + newLine);
                            AppGui.logger.log(Level.INFO, () -> "Unable to connect to the server.");
                            AppGui.this.btnLogin.setEnabled(true);
                            return;
                        }
                        
                        AppGui.this.logArea.append("Attempting to login..." + newLine);
                        if(!AppGui.this.client.login(new Account(AppGui.this.email, password, charId), (AppGui.this.collectVaultInfo?GameId.VAULT : GameId.NEXUS))) {
                            AppGui.this.logArea.append("Unable to login." + newLine);
                            AppGui.logger.log(Level.INFO, () -> "Unable to login.");
                            if(AppGui.this.client.isConnected()) {
                                    AppGui.this.client.disconnect();
                            }
                            AppGui.this.btnLogin.setEnabled(true);
                            return;
                        }
                        
                        //Wait for account name to be set via first UPDATE packet.
                        while(AppGui.this.client.accountName == null) {
                            AppGui.logger.log(Level.INFO, () -> "Account name not set yet.");
                            Thread.sleep(100);
                        }

                        AppGui.this.setTitle(AppGui.this.getTitle() + " - " + email + "[" + AppGui.this.client.accountName + "]");
                        AppGui.this.logArea.append("Successfuly logged into to server [" + AppGui.this.server.name + 
                                                   "] on character [" + AppGui.this.client.accountName + "]" + newLine);
                        AppGui.this.btnLogin.setText("Logout");
                        AppGui.this.btnLogin.setEnabled(true);
                        
                        if(AppGui.this.collectVaultInfo) {
                            new Thread(AppGui.this.loadVaultDataTask).start();                            
                        } else {                        
                            AppGui.this.btnTrade.setEnabled(true);
                            AppGui.this.btnStoreItems.setEnabled(true);
                        }
                    } catch(NumberFormatException e) {
                        AppGui.this.logArea.append("Character ID is invalid. It must be an integer.");
                    } catch (Exception e) {                        
                        AppGui.this.logArea.append("Failed to login." + newLine);
                        if(AppGui.this.client.isConnected()) {
                            AppGui.this.client.disconnect();
                        }
                    }
                }
            }
        });
    }//GEN-LAST:event_btnLoginActionPerformed

    private void emailFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailFieldActionPerformed
        
    }//GEN-LAST:event_emailFieldActionPerformed

    private void cbVaultingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbVaultingItemStateChanged
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            AppGui.this.autoStore = true;
        } else {
            AppGui.this.autoStore = false;
        }
    }//GEN-LAST:event_cbVaultingItemStateChanged

    private void btnStoreItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStoreItemsActionPerformed
        workerPool.execute(AppGui.this.storeTask);
    }//GEN-LAST:event_btnStoreItemsActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        AppGui.this.workerPool.execute(new Runnable() {
            @Override
            public void run() {
                AppGui.this.logArea.setText("");
            }
        });
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void cbVaultDataItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbVaultDataItemStateChanged
        if(evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            AppGui.this.collectVaultInfo = true;
        } else {
            AppGui.this.collectVaultInfo = false;
        }
    }//GEN-LAST:event_cbVaultDataItemStateChanged

    /*
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {                
        //Set up global logger and formatting properties
        try {
            util.Logger.loadSettings();
            //throw new java.lang.ExceptionInInitializerError();
        } catch(java.lang.ExceptionInInitializerError e) {
            javax.swing.JOptionPane.showMessageDialog(null, "Failed to initialize Logging utilities", "ERROR", javax.swing.JOptionPane.PLAIN_MESSAGE);
            System.exit(-1);
        }        
        AppGui.logger = util.Logger.getLogger(AppGui.class.getSimpleName());        

        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException e) {
            AppGui.logger.log(Level.WARNING, e, () -> "Failed to load application icon");
        } 
        
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                javax.swing.JFrame mainWin = new AppGui();
                mainWin.setTitle(AppGui.defaultTitle);
                mainWin.setDefaultCloseOperation(javax.swing.JFrame.EXIT_ON_CLOSE);
                mainWin.setLocationRelativeTo(null);
                
                ArrayList<java.awt.Image> list = new ArrayList<>();
                list.add(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon_16.png")));
                list.add(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon_32.png")));
                list.add(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon_64.png")));
                list.add(Toolkit.getDefaultToolkit().createImage(getClass().getResource("/images/icon_128.png")));                
                mainWin.setIconImages(list);
                
                mainWin.setVisible(true);
            }
        });
        
        //Clean up char id and lock files
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            @Override
            public void run() {
                java.io.File file = new java.io.File(util.Logger.getLoggingPath() + "/shutdownlog.txt");
                java.io.PrintWriter out = null;
                try {
                    out = new java.io.PrintWriter(file);
                    
                    out.println("Cleaning ACC files: ");
                    java.io.File cleanupFiles = new java.io.File("./res/temp");
                    for(java.io.File f : cleanupFiles.listFiles()) {
                        if(f.getName().contains(".acc")) {                       
                            out.println("Deleting file: " + f.getAbsolutePath());
                            f.delete();
                        }
                    }

                    out.println("Cleaning LCK files: ");
                    for(java.io.File f : new java.io.File(util.Logger.getLoggingPath()).listFiles()) {
                        if(f.getName().contains(".lck")) {
                            out.println("Deleting file: " + f.getAbsolutePath());
                            f.delete();
                        }
                    }
                } catch (IOException e) {
                    System.out.println("Failed to log shutdown.");
                } finally {
                    if(out != null)
                        out.close();
                }                
                
                /*
                AppGui.logger.log(Level.INFO, () -> "CLEAN UP ACC FILES: ");
                System.out.println("CLEAN UP ACC FILES: ");
                java.io.File cleanupFiles = new java.io.File("./res/temp");
                for(java.io.File f : cleanupFiles.listFiles()) {
                    if(f.getName().contains(".acc")) {                       
                        f.delete();
                        AppGui.logger.log(Level.INFO, () -> "Deleting file: " + f.getAbsolutePath());
                        System.out.println("Deleting file: " + f.getAbsolutePath());
                    }
                }
                
                AppGui.logger.log(Level.INFO, () -> "CLEAN UP LCK FILES: ");
                System.out.println("CLEAN UP LCK FILES: ");
                for(java.io.File f : new java.io.File(util.Logger.getLoggingPath()).listFiles()) {
                    if(f.getName().contains(".lck")) {
                        f.delete();
                        AppGui.logger.log(Level.INFO, () -> "Deleting file: " + f.getAbsolutePath());
                        System.out.println("Deleting file: " + f.getAbsolutePath());
                    }
                }
                */
            }
        }));
        
    }
    
    //ROTMG variables
    private static final String defaultTitle = "RotMG Clientless";
    private String email;
    private boolean autoStore = true;
    private boolean collectVaultInfo = false;
    
    private Proxy proxy;
    private Client client;
    private ArrayList<String> serverList;
    private ServerNode server;
    private Runnable storeTask;
    private Runnable loadVaultDataTask;
    private Map<String, Account> accounts;
    private HashMap<Integer, VaultChest> vaultChestsBackup;
    private final static java.awt.Color INVENTORY_COLOR = java.awt.Color.WHITE;
    private final static java.awt.Color BAG_COLOR = new java.awt.Color(Integer.decode("0xFFFF99"));
    private final static java.awt.Color CHEST_COLOR_1 = new java.awt.Color(Integer.decode("0x66FFFF"));
    private final static java.awt.Color CHEST_COLOR_2 = new java.awt.Color(Integer.decode("0xCCFFFF"));
    
    private java.util.concurrent.ExecutorService workerPool = java.util.concurrent.Executors.newFixedThreadPool(1);
    private String newLine = System.lineSeparator();
    private static java.util.logging.Logger logger;
    
    //Action to perfrom when logging off from a client.
    private void logoff() {
        this.setTitle(this.defaultTitle);
        this.btnLogin.setText("Login");
        this.logArea.append("Disconnecting from server..." + newLine);
        this.btnTrade.setEnabled(false);
        this.btnStoreItems.setEnabled(false);
    }
    
    //Prepares game and GUI components.
    private void initGamedata() {
        //Loading xmls may be expensive, don't do work in EDT.
        workerPool.execute(new java.lang.Runnable() {
            @Override
            public void run() {
                try {
                    AppGui.this.logArea.append("Loading game xmls..." + newLine);
                    gamedata.GameData.load();

                    AppGui.this.logArea.append("Initializing network listeners..." + newLine);
                    AppGui.this.proxy = new Proxy();
                    
                    AppGui.this.logArea.append("Loading server list..." + newLine);
                    //NOTE: Abbreviations list must be updated when server list is updated, otherwise,
                    //      new servers will not show up.
                    AppGui.this.serverList = new ArrayList<String>(ServerNode.abbreviations.keySet());
                    Collections.sort(AppGui.this.serverList);
                    //new model with server list for already created server combobox
                    AppGui.this.serverComboBox.setModel(new javax.swing.DefaultComboBoxModel(AppGui.this.serverList.toArray()));
                    Thread.sleep(150);
                    AppGui.this.serverComboBox.setSelectedItem("USWest"); 

                    ServerNode sNode = GameData.servers.byName("USWest");
                    if(sNode == null) {
                        AppGui.this.logArea.append("Unable select server [USWest].");
                    } else {
                        AppGui.this.server = sNode;
                    }

                    AppGui.this.logArea.append("Initializing game client..." + newLine);
                    AppGui.this.client = new Client(proxy);                    
                    
                    
                    //Initialize accounts list
                    AppGui.this.logArea.append("Loading saved accounts..." + newLine);
                    AppGui.this.accounts = AppGui.this.loadAccounts();
                    if(AppGui.this.accounts.size() > 0) {                        
                        javax.swing.DefaultListModel listModel = new javax.swing.DefaultListModel<>();
                        Object[] accList = AppGui.this.accounts.keySet().toArray();
                        java.util.Arrays.sort(accList);
                        for(Object guid : accList) {
                            listModel.addElement(guid);
                        } 
                        AppGui.this.jlAccountList.setModel(listModel);
                    }   
                    
                    setListeners();
                    setTasks();
                    
                    AppGui.this.btnLogin.setEnabled(true);
                    
                } catch(Exception | java.lang.ExceptionInInitializerError e) {
                    AppGui.this.logArea.append("Unable to initialize client...");
                    if(e instanceof java.lang.ExceptionInInitializerError) {
                        AppGui.this.logArea.append("[" + e.getCause().getMessage() + "]");
                    }
                    AppGui.this.logArea.append(newLine);                
                    AppGui.this.btnLogin.setEnabled(false);
                    AppGui.this.jMenu1.setEnabled(false);
                }
            }
        });
    }
    
    private void setListeners() {
        //Detects item list change via 'Update' and 'NewTick' packets and updates item list in GUI
        PacketListener listUpdate = new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                if(client.itemListsUpdated) {
                    javax.swing.DefaultListModel<String> listModel = new javax.swing.DefaultListModel<String>();
                    AppGui.logger.log(Level.FINE, () -> "Vault chests size: " + client.vaultChests.size());
                    
                    int i = 1;
                    for(Integer item : AppGui.this.client.inv) {
                        listModel.addElement("[" + (i++) + "]  " + gamedata.GameData.items.byId(item).name);
                    }
                    if(client.hasBackpack) {
                        for(Integer item : AppGui.this.client.backpack) {
                            listModel.addElement("[" + (i++) + "]  " + gamedata.GameData.items.byId(item).name);
                        }
                    }
                    if(client.vaultChests.size() > 0) {
                        ArrayList<Integer> orderedChests = new ArrayList(client.vaultChests.keySet());
                        Collections.sort(orderedChests);
                        for(Integer id : orderedChests) {
                            VaultChest c = client.vaultChests.get(id);
                            if(c == null) { continue; }
                            i = 1;
                            for(Integer item : c.items) {
                                listModel.addElement("[C" + c.id + "." + (i++) + "] " + GameData.items.byId(item).name);
                            }
                        }
                    }
                    
                    AppGui.this.invList.setModel(listModel);
                    client.itemListsUpdated = false;
                }
            }
        };
        AppGui.this.proxy.hookPacket(Packet.PacketType.UPDATE, listUpdate);
        AppGui.this.proxy.hookPacket(Packet.PacketType.NEWTICK, listUpdate);
        
        //Accepts trade when other player accepts trade
        AppGui.this.proxy.hookPacket(PacketType.TRADEACCEPTED, new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                TradeAcceptedPacket tap = (TradeAcceptedPacket)packet;
                
                AcceptTradePacket atp = new AcceptTradePacket();
                atp.myOffers = tap.myOffers;
                atp.yourOffers = tap.partnerOffers;
                client.sendQueue.add(atp);
            }
        }); 
        
        //Upon completed trade, store items if vaulting is enabled.
        AppGui.this.proxy.hookPacket(PacketType.TRADEDONE, new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {
                TradeDonePacket tdp = (TradeDonePacket)packet;
                //Only care about successful trades
                if(tdp.result == 0 && AppGui.this.autoStore) {
                    workerPool.execute(AppGui.this.storeTask);                    
                }
            }
        });        
        
        //Upon failure, reset GUI
        AppGui.this.proxy.hookPacket(PacketType.FAILURE, new PacketListener() {
            @Override
            public void onPacketReceived(Client client, Packet packet) {                
                FailurePacket fp = (FailurePacket)packet;
                AppGui.this.logArea.append("Failed action; Failure ID: [" + fp.errorId + "], Failure msg: [" + fp.errorMessage + "]" + newLine);
            }
        });
        
               
        //Load login info from saved accounts list
        AppGui.this.jlAccountList.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent e) {
                if(e.getClickCount() == 2 && e.getButton() == java.awt.event.MouseEvent.BUTTON1) {
                    int index = AppGui.this.jlAccountList.locationToIndex(e.getPoint());
                    if(index >= 0) {
                        String gui = (String)AppGui.this.jlAccountList.getModel().getElementAt(index);
                        Account acc = AppGui.this.accounts.get(gui);
                        if(acc != null) {
                            AppGui.this.emailField.setText(acc.guid);
                            AppGui.this.passField.setText(acc.password);
                            AppGui.this.charIdField.setText(Integer.toString(acc.charId));
                        } else {
                            AppGui.this.logArea.append("ERROR: Unable to load account.");
                        }
                    }                    
                }
            }
        });
        
        //Removes entry from list when 'Delete' is pressed
        AppGui.this.jlAccountList.addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
                    AppGui.this.workerPool.execute(new Runnable() {
                        @Override
                        public void run() {
                            AppGui.this.removeAccount();
                        }
                    });
                }
            }
        });
        
        
        //Upon client disconnect save the vault data of a client.
        AppGui.this.proxy.hookDisconnect(new ConnectionListener() {
            @Override
            public void onConnection(Client client) {
                AppGui.this.vaultChestsBackup = new HashMap(client.vaultChests);
                if(!client.isReconnecting) {
                    AppGui.logger.log(Level.INFO, "Resetting GUI upon logging out...");
                    AppGui.this.logoff();
                }
            }
        });
        
        //Upon client reconnects, load the old vault chest data.
        AppGui.this.proxy.hookReconnect(new ConnectionListener() {
            @Override
            public void onConnection(Client client) {
                client.vaultChests = AppGui.this.vaultChestsBackup;
            }
        });
        
    }
    
    private void setTasks() {
        this.storeTask = new Runnable() {
            @Override
            public void run() {
                int numItemsMoved = 0;
                int numItemsStored = 0;
                try {
                    AppGui.this.logArea.append("Storing items...Please wait..." + newLine);
                    AppGui.this.btnTrade.setEnabled(false);
                    AppGui.this.btnStoreItems.setEnabled(false);
                    
                    
                    if((numItemsMoved = client.moveItemsToBackpack()) > 0) {
                        AppGui.this.logArea.append("Moved [" + numItemsMoved + "] items to backpack." + newLine);
                    }
                    
                    //Only try to vault items if there are items in inventory or backpack.
                    if(client.isInventoryEmpty() && client.hasBackpack && client.isBackpackEmpty()) {
                        return;
                    }
                    if(!client.reconnect(GameId.VAULT)) {
                        AppGui.logger.log(Level.INFO, () -> "Failed to connect to vault.");
                        AppGui.this.logArea.append("Failed to deposit items.");
                        return;
                    }

                    //wait for the chest data to come in.
                    while((client.getTime() - client.vaultDataLastUpdated) < 2000) {
                        Thread.sleep(200);
                    }

                    //store items in visible chests
                    if(!client.isInventoryEmpty() || !client.isBackpackEmpty()) {
                        //inventory slots values range from [4, 11] and backpack ranges from [12, 19]
                        for(int s = 4; (client.hasBackpack?s < 20 : s < 12); s++) {
                            int fromSlot = (s < 12? s - 4 : s - 12);
                            ArrayList<Integer> storeFrom = (s < 12? client.inv : client.backpack);
                            int item = storeFrom.get(fromSlot);
                            if(item == -1) {
                                continue;
                            }

                            //Find a empty slot in vault.
                            int toSlot = -1;
                            for(VaultChest vc : client.vaultChests.values()) {
                                for(int i = 0; i < 8 ; i++) {
                                    if(vc.items.get(i) == -1) {
                                        toSlot = i;
                                        break;
                                    }
                                }
                                if(toSlot > -1) {
                                    //move to chest location
                                    client.moveToFreely((Location)vc.position.clone());
                                    while(!client.position.isSameAs(vc.position)) {
                                        Thread.sleep(500);
                                    }
                                    //empty slot was found in vault; move item here from inv/backpack
                                    InvSwapPacket isp = new InvSwapPacket();
                                    isp.position = (Location)client.position.clone();
                                    isp.time = client.getTime();
                                    isp.slotObject1 = new SlotObject();
                                    isp.slotObject1.objectId = client.objectId;
                                    isp.slotObject1.slotId = s;
                                    isp.slotObject1.objectType = item;
                                    isp.slotObject2 = new SlotObject();
                                    isp.slotObject2.objectId = vc.id;
                                    isp.slotObject2.slotId = toSlot;
                                    isp.slotObject2.objectType = -1;
                                    client.sendQueue.add(isp);
                                    numItemsStored++;

                                    AppGui.logger.log(Level.FINE, () -> "From: " + isp.slotObject1);
                                    AppGui.logger.log(Level.FINE, () -> "To: " + isp.slotObject2);

                                    Thread.sleep(650);                                    
                                    break;
                                }
                            }
                        }
                    }
                    
                    if(client.reconnect(GameId.NEXUS)) {                    
                        AppGui.this.btnTrade.setEnabled(true);
                        AppGui.this.btnStoreItems.setEnabled(true);
                        AppGui.this.logArea.append("Deposited [" + numItemsStored + "] items in chests." + newLine);
                    } else {
                        AppGui.logger.log(Level.INFO, () -> "Failed to return to nexus after storing items.");
                        AppGui.this.logArea.append("Failed to return to nexus.");
                        return;
                    }
                } catch(InterruptedException | CloneNotSupportedException e) {
                    AppGui.logger.log(Level.WARNING, e, () -> "Failed to store items.");
                }
            }
        };
        
        this.loadVaultDataTask = new Runnable() {
            @Override
            public void run() {
                try {
                    if(AppGui.this.client.isConnected() && AppGui.this.client.isLoggedIn()) {
                        AppGui.logger.log(Level.INFO, () -> "Loading vault chest data...");
                        AppGui.this.logArea.append("Collecting vault data...Please wait..." + newLine);
                        //Load left chest area in vault
                        client.moveToFreely(new Location(33.4f, 72.9f));
                        while(AppGui.this.client.isConnected() && !client.position.isSameAs(client.moveToPos)) {
                            Thread.sleep(200);
                        }
                        //Load right chest area in vault
                        client.moveToFreely(new Location(55.7f, 72.9f));
                        while(AppGui.this.client.isConnected() && !client.position.isSameAs(client.moveToPos)) {
                            Thread.sleep(200);
                        }
                        if(AppGui.this.client.isConnected() && AppGui.this.client.isLoggedIn()) {
                            AppGui.this.logArea.append("Attempting to connect to [Nexus]..." + newLine);
                            if(client.reconnect(GameId.NEXUS)) {
                                AppGui.this.logArea.append("Connected to [Nexus]." + newLine);
                                AppGui.this.btnTrade.setEnabled(true);
                                AppGui.this.btnStoreItems.setEnabled(true);                                
                            }
                        }
                    }
                } catch(InterruptedException e) {
                    AppGui.logger.log(Level.WARNING, () -> "Failed to load vault chest data.");
                }
            }
        };
    }
    
    private HashMap<String, Account> loadAccounts() {
        HashMap<String, Account> accMap = new HashMap<>(10);
        java.io.BufferedReader br = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("res/accounts.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            for(int i = 0; i < arr.length(); i++) {
                String email = arr.getJSONObject(i).getString("email");
                String password = arr.getJSONObject(i).getString("password");
                int charId = arr.getJSONObject(i).getInt("charid");
                //AppGui.logger.log(Level.FINE, () -> "read obj: [" + email + ", " + password + ", " + charId + "]");
                accMap.put(email, new Account(email, password, charId));
            }
        } catch (IOException e) {
            AppGui.logger.log(Level.WARNING, e, () -> "Failed to load saved accounts");
        } finally {
            try {
                if(br != null)
                    br.close();
            } catch (IOException e) {
                AppGui.logger.log(Level.WARNING, e, () -> "Failed to close json accounts file");
            }
            return accMap;
        }
    }
    
    private void saveAccount() {
        String newEmail = AppGui.this.emailField.getText().trim();
        String newPass = new String(AppGui.this.passField.getPassword());
        if(newEmail.matches("") || newPass.matches("")) {
            AppGui.this.logArea.append("ERROR: Unable to save account info. Enter valid email and password." + newLine);
            return;
        }
        String newCharId = AppGui.this.charIdField.getText().trim();
        if(newCharId.matches("")) {
            newCharId = "-1";
        }
        
        //"accounts" map needs to be updated to allow for JList to search data associated with an email
        AppGui.this.accounts.put(newEmail, new Account(newEmail, newPass, Integer.parseInt(newCharId)));
        ((javax.swing.DefaultListModel)AppGui.this.jlAccountList.getModel()).addElement(newEmail);
        
        java.io.BufferedReader br = null;
        java.io.BufferedWriter bw = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("res/accounts.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            br.close();           
            
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            org.json.JSONObject newJo = new org.json.JSONObject("{\"email\": \"" + newEmail + 
                                                                 "\",\"password\": \"" + newPass + 
                                                                 "\",\"charid\": " + newCharId + "}");
            arr.put(newJo);
            jo.put("accounts", arr);
            bw = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream("res/accounts.json")));
            bw.write(jo.toString());
            bw.close();
            AppGui.this.logArea.append("Saved account info for account [" + newEmail + "]" + newLine);
        } catch (IOException e) {
            AppGui.logger.log(Level.WARNING, e, () -> "Failed to save accounts");
        } finally {
            try {
                if(br != null)
                    br.close();
                if(bw != null)
                    bw.close();
            } catch (Exception e) {
                AppGui.logger.log(Level.WARNING, e, () -> "Failed to close read/write handlers for accounts JSON file");
            }
        }
    }
    
    private void removeAccount() {
        String entry = (String)AppGui.this.jlAccountList.getSelectedValue();
        
        if(entry == null) {
            return;
        }
        //remove from GUI
        ((javax.swing.DefaultListModel)AppGui.this.jlAccountList.getModel()).removeElement(entry);
        AppGui.this.accounts.remove(entry);
        
        //remove from file
        java.io.BufferedReader br = null;
        java.io.BufferedWriter bw = null;
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream("res/accounts.json"), "UTF-8"));
            String json = "";
            String line;
            while((line = br.readLine()) != null) {
                json += line;
            }
            br.close();           
            
            org.json.JSONObject jo = new org.json.JSONObject(json);
            org.json.JSONArray arr = jo.getJSONArray("accounts");
            for(int i = 0; i < arr.length(); i++) {
                if(arr.getJSONObject(i).getString("email").compareTo(entry) == 0) {
                    arr.remove(i);
                    break;
                }
            }
            jo.put("accounts", arr);
            bw = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream("res/accounts.json")));
            bw.write(jo.toString());
            bw.close();
            AppGui.this.logArea.append("Removed saved account [" + entry + "] from list." + newLine);
        } catch (IOException e) {
            AppGui.logger.log(Level.WARNING, e, () -> "Failed to remove account");
        } finally {
            try {
                if(br != null)
                    br.close();
                if(bw != null)
                    bw.close();
            } catch (Exception e) {
                AppGui.logger.log(Level.WARNING, e, () -> "Failed to close read/write handlers for accounts JSON file");
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnStoreItems;
    private javax.swing.JButton btnTrade;
    private javax.swing.JCheckBox cbVaultData;
    private javax.swing.JCheckBox cbVaulting;
    private javax.swing.JTextField charIdField;
    private javax.swing.JTextField emailField;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JList invList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList jlAccountList;
    private javax.swing.JTextArea logArea;
    private javax.swing.JPasswordField passField;
    private javax.swing.JComboBox serverComboBox;
    private javax.swing.JTextField tradeNameField;
    // End of variables declaration//GEN-END:variables
}
